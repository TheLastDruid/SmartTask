name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:staging
          ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:staging
          ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/smarttask
          
          # Pull latest images
          docker pull ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:staging
          docker pull ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:staging
          
          # Update docker-compose file
          export BACKEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/smarttask-backend:staging
          export FRONTEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:staging
          
          # Stop existing containers
          docker-compose down
          
          # Start new containers
          docker-compose up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Health check
          curl -f http://localhost:8080/api/health || exit 1

    - name: Run integration tests against staging
      run: |
        # Wait for deployment to stabilize
        sleep 60
        
        # Run integration tests
        cd backend
        ./mvnw test -Dtest="**/*IntegrationTest" -Dspring.profiles.active=staging

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Staging Deployment: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Tag images for production
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:${{ github.sha }}
        docker pull ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:${{ github.sha }}
        
        docker tag ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:production
        docker tag ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:production
        
        docker push ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:production
        docker push ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:production

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/smarttask
          
          # Create backup of current deployment
          docker-compose down
          docker tag ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:production ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:backup-$(date +%Y%m%d%H%M%S)
          docker tag ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:production ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:backup-$(date +%Y%m%d%H%M%S)
          
          # Pull latest production images
          docker pull ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:production
          docker pull ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:production
          
          # Update environment variables
          export BACKEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/smarttask-backend:production
          export FRONTEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:production
          
          # Rolling deployment
          docker-compose up -d --no-deps backend
          sleep 30
          curl -f http://localhost:8080/api/health || exit 1
          
          docker-compose up -d --no-deps frontend
          sleep 30
          curl -f http://localhost || exit 1

    - name: Run production smoke tests
      run: |
        # Basic smoke tests for production
        sleep 60
        curl -f ${{ secrets.PRODUCTION_URL }}/api/health
        curl -f ${{ secrets.PRODUCTION_URL }}

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#production'
        text: |
          üöÄ Production Deployment: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          URL: ${{ secrets.PRODUCTION_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Rollback production deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/smarttask
          
          # Find latest backup
          BACKUP_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep smarttask-backend:backup- | head -1 | cut -d':' -f2)
          
          if [ ! -z "$BACKUP_TAG" ]; then
            echo "Rolling back to backup: $BACKUP_TAG"
            docker tag ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:$BACKUP_TAG ${{ secrets.DOCKER_USERNAME }}/smarttask-backend:production
            docker tag ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:$BACKUP_TAG ${{ secrets.DOCKER_USERNAME }}/smarttask-frontend:production
            
            docker-compose down
            docker-compose up -d
            
            sleep 30
            curl -f http://localhost:8080/api/health || exit 1
          else
            echo "No backup found for rollback"
            exit 1
          fi

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#production'
        text: |
          ‚ö†Ô∏è Production Rollback Executed
          Reason: Deployment failure
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
